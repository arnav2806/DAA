import java.util.Random;
import java.util.Arrays;

class QuickSort {
    public static void quickSort(int[] array, int low, int high) {
        if (low < high) {
            int pi = partition(array, low, high);
            quickSort(array, low, pi - 1);
            quickSort(array, pi + 1, high);
        }
    }

    private static int partition(int[] array, int low, int high) {
        int pivot = array[high];
        int i = low - 1;
        for (int j = low; j < high; j++) {
            if (array[j] < pivot) {
                i++;
                swap(array, i, j);
            }
        }
        swap(array, i + 1, high);
        return i + 1;
    }

    private static void swap(int[] array, int i, int j) {
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
    
}
class MergeSort {
    public static void mergeSort(int[] array, int left, int right) {
        if (left < right) {
            int mid = left + (right - left) / 2;
            mergeSort(array, left, mid);
            mergeSort(array, mid + 1, right);
            merge(array, left, mid, right);
        }
    }

    private static void merge(int[] array, int left, int mid, int right) {
        int n1 = mid - left + 1;
        int n2 = right - mid;

        int[] leftArray = new int[n1];
        int[] rightArray = new int[n2];

        for (int i = 0; i < n1; i++) {
            leftArray[i] = array[left + i];
        }
        for (int j = 0; j < n2; j++) {
            rightArray[j] = array[mid + 1 + j];
        }

        int i = 0, j = 0, k = left;
        while (i < n1 && j < n2) {
            if (leftArray[i] <= rightArray[j]) {
                array[k] = leftArray[i];
                i++;
            } else {
                array[k] = rightArray[j];
                j++;
            }
            k++;
        }

        while (i < n1) {
            array[k] = leftArray[i];
            i++;
            k++;
        }

        while (j < n2) {
            array[k] = rightArray[j];
            j++;
            k++;
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Random random = new Random();
        int[] data = new int[500];
        for (int i = 0; i < 500; i++) {
            data[i] = random.nextInt(1000);
        }

        int[] dataForQuickSort = Arrays.copyOf(data, data.length);
        int[] dataForMergeSort = Arrays.copyOf(data, data.length);

        // Measure time for Quicksort
        long startQuickSort = System.nanoTime();
        QuickSort.quickSort(dataForQuickSort, 0, dataForQuickSort.length - 1);
        long endQuickSort = System.nanoTime();
        System.out.println("Time for Quicksort: " + (endQuickSort - startQuickSort) + " ns");

        // Measure time for Mergesort
        long startMergeSort = System.nanoTime();
        MergeSort.mergeSort(dataForMergeSort, 0, dataForMergeSort.length - 1);
        long endMergeSort = System.nanoTime();
        System.out.println("Time for Mergesort: " + (endMergeSort - startMergeSort) + " ns");

        // Optional: Uncomment to verify sorted arrays
        // System.out.println("Sorted Array by Quicksort: " + Arrays.toString(dataForQuickSort));
        // System.out.println("Sorted Array by Mergesort: " + Arrays.toString(dataForMergeSort));
    }
}
/*
Time Complexity
QuickSort:
Best Case: 𝑂(nlogn) - When the pivot divides the array into two nearly equal parts.
Average Case: O(nlogn) — Typical scenario with random data.
Worst Case: O(n2) When the pivot divides the array very unevenly (e.g., all elements are already sorted).
Merge Sort:
time:O(n log n)
Space Complexity
QuickSort:
Space Used: 
𝑂(logn) - Due to recursive calls on the stack.
In-place: Yes, as no auxiliary arrays are used.
Merge Sort:
Space Used: 
𝑂(𝑛) - Requires additional space for temporary arrays.*/
