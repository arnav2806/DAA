import java.util.*;

public class program_10 {

    public static int[] crossover(int[] parent1,int[] parent2){
        int size = parent1.length;
        int[] child = new int[size];

        for(int i=0;i<size;i++){
            child[i] = -1;
        }

        //randomly select 2 points for crossover
        Random rand = new Random();
        int start = rand.nextInt(size);
        int end = rand.nextInt(size);

        //check if start<end
        if(start > end){
            int temp = start;
            start = end;
            end = temp;
        }

        System.arraycopy(parent1,start,child,start,end-start+1);

        //select nodes from parent2 that can produce potential offsprings
        int currentIndex = 0;
        for(int i=0;i<size;i++){
            if(child[i] == -1){
                while(contains(child,parent2[currentIndex])){
                    currentIndex++;
                }
                child[i] = parent2[currentIndex];
                currentIndex++;
            }
        }
        return child;
    }

    public static boolean contains(int[] arr,int value){
        for(int city:arr){
            if(city == value){
                return true;
            }
        }
        return false;
    }

    public static int[] tournamentSelection(List<int[]> population, int tournamentSize) {
        Random rand = new Random();
        List<int[]> tournament = new ArrayList<>();

        // Randomly select a subset of individuals (tournament)
        for (int i = 0; i < tournamentSize; i++) {
            tournament.add(population.get(rand.nextInt(population.size())));
        }

        // Evaluate fitness of each individual in the tournament
        int[] bestIndividual = tournament.get(0);
        int bestFitness = fitness(bestIndividual);

        for (int i = 1; i < tournament.size(); i++) {
            int[] individual = tournament.get(i);
            int currentFitness = fitness(individual);
            if (currentFitness < bestFitness) {  // Assuming lower fitness is better for TSP
                bestIndividual = individual;
                bestFitness = currentFitness;
            }
        }

        return bestIndividual;
    }

    // Fitness function for evaluating a solution (TSP: sum of distances)
    public static int fitness(int[] chromosome) {
        int totalDistance = 0;
        for (int i = 0; i < chromosome.length - 1; i++) {
            // You would use your distance matrix here for calculating the distance
            totalDistance += distance(chromosome[i], chromosome[i + 1]);
        }
        // Returning the distance from the last city back to the first city
        totalDistance += distance(chromosome[chromosome.length - 1], chromosome[0]);

        return totalDistance;
    }

    // Dummy distance function to calculate the distance between two cities (city indices)
    public static int distance(int city1, int city2) {
        // Implement actual distance calculation here based on coordinates or a distance matrix
        return Math.abs(city1 - city2);  // Simple placeholder (use real distance logic)
    }

    public static void main(String[] args) {
        // Example test for crossover and tournament selection

        // Initialize population with some sample chromosomes (city permutations)
        List<int[]> population = new ArrayList<>();
        population.add(new int[]{0, 1, 2, 3, 4});
        population.add(new int[]{4, 3, 2, 1, 0});
        population.add(new int[]{1, 2, 3, 4, 0});
        population.add(new int[]{2, 0, 1, 4, 3});

        int tournamentSize = 2;

        // Tournament selection to pick two parents
        int[] parent1 = tournamentSelection(population, tournamentSize);
        int[] parent2 = tournamentSelection(population, tournamentSize);

        System.out.println("Parent 1: " + Arrays.toString(parent1));
        System.out.println("Parent 2: " + Arrays.toString(parent2));

        // Perform crossover between the two parents
        int[] child = crossover(parent1, parent2);
        System.out.println("Child after Crossover: " + Arrays.toString(child));

        // Example test for fitness function (calculating the total distance)
        System.out.println("Fitness of Parent 1: " + fitness(parent1));
        System.out.println("Fitness of Parent 2: " + fitness(parent2));
        System.out.println("Fitness of Child: " + fitness(child));
    }
}
