import java.util.*;

public class program_10 {

    // Crossover function for generating a child from two parents
    public static int[] crossover(int[] parent1, int[] parent2) {
        int size = parent1.length; // Size of the chromosome
        int[] child = new int[size]; // Child chromosome initialized

        // Initialize child array with -1 (representing unassigned cities)
        for (int i = 0; i < size; i++) {
            child[i] = -1;
        }

        // Randomly select two points for crossover
        Random rand = new Random();
        int start = rand.nextInt(size);
        int end = rand.nextInt(size);

        // Ensure that start is less than end
        if (start > end) {
            int temp = start;
            start = end;
            end = temp;
        }

        // Copy the selected segment from parent1 to child
        System.arraycopy(parent1, start, child, start, end - start + 1);

        // Fill remaining positions in the child chromosome with cities from parent2
        int currentIndex = 0;
        for (int i = 0; i < size; i++) {
            if (child[i] == -1) { // Find unassigned positions
                // Ensure that we don't add duplicate cities already in the child
                while (contains(child, parent2[currentIndex])) {
                    currentIndex++;
                }
                child[i] = parent2[currentIndex]; // Assign the city to the child
                currentIndex++;
            }
        }

        return child; // Return the generated child chromosome
    }

    // Helper function to check if a value exists in an array
    public static boolean contains(int[] arr, int value) {
        for (int city : arr) {
            if (city == value) {
                return true;
            }
        }
        return false;
    }

    // Tournament selection function to select a parent from the population
    public static int[] tournamentSelection(List<int[]> population, int tournamentSize) {
        Random rand = new Random();
        List<int[]> tournament = new ArrayList<>();

        // Randomly select a subset of individuals (tournament)
        for (int i = 0; i < tournamentSize; i++) {
            tournament.add(population.get(rand.nextInt(population.size())));
        }

        // Evaluate the fitness of each individual in the tournament and select the best
        int[] bestIndividual = tournament.get(0);
        int bestFitness = fitness(bestIndividual);

        for (int i = 1; i < tournament.size(); i++) {
            int[] individual = tournament.get(i);
            int currentFitness = fitness(individual);
            // Assuming lower fitness is better for TSP (shorter path)
            if (currentFitness < bestFitness) {
                bestIndividual = individual;
                bestFitness = currentFitness;
            }
        }

        return bestIndividual; // Return the best individual (parent)
    }

    // Fitness function for evaluating a solution (TSP: sum of distances)
    public static int fitness(int[] chromosome) {
        int totalDistance = 0;

        // Calculate the total distance for the tour
        for (int i = 0; i < chromosome.length - 1; i++) {
            totalDistance += distance(chromosome[i], chromosome[i + 1]);
        }

        // Add the distance to return to the start city
        totalDistance += distance(chromosome[chromosome.length - 1], chromosome[0]);

        return totalDistance; // Return the total distance (fitness score)
    }

    // Dummy distance function to calculate the distance between two cities (city indices)
    public static int distance(int city1, int city2) {
        // Placeholder for real distance calculation logic (e.g., distance matrix or coordinates)
        return Math.abs(city1 - city2); // Simple placeholder (difference in city indices)
    }

    public static void main(String[] args) {
        // Example test for crossover and tournament selection

        // Initialize population with some sample chromosomes (city permutations)
        List<int[]> population = new ArrayList<>();
        population.add(new int[]{0, 1, 2, 3, 4});
        population.add(new int[]{4, 3, 2, 1, 0});
        population.add(new int[]{1, 2, 3, 4, 0});
        population.add(new int[]{2, 0, 1, 4, 3});

        int tournamentSize = 2; // Size of the tournament for selecting parents

        // Tournament selection to pick two parents
        int[] parent1 = tournamentSelection(population, tournamentSize);
        int[] parent2 = tournamentSelection(population, tournamentSize);

        // Print the selected parents
        System.out.println("Parent 1: " + Arrays.toString(parent1));
        System.out.println("Parent 2: " + Arrays.toString(parent2));

        // Perform crossover between the two parents to produce a child
        int[] child = crossover(parent1, parent2);
        System.out.println("Child after Crossover: " + Arrays.toString(child));

        // Example test for fitness function (calculating the total distance)
        System.out.println("Fitness of Parent 1: " + fitness(parent1));
        System.out.println("Fitness of Parent 2: " + fitness(parent2));
        System.out.println("Fitness of Child: " + fitness(child));
    }
}
