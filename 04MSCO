import java.util.*;

public class Main {

    // PART A: MERGE SORT IMPLEMENTATION AND TIME COMPARISON

    // Function to merge two sorted halves of the array
    public static void merge(int[] array, int low, int mid, int high) {
        int leftArraySize = mid - low + 1; // Size of the left sub-array
        int rightArraySize = high - mid;  // Size of the right sub-array

        // Create temporary arrays to hold the values
        int[] left = new int[leftArraySize];
        int[] right = new int[rightArraySize];

        // Copy data into the temporary arrays
        for (int i = 0; i < leftArraySize; i++) {
            left[i] = array[low + i];
        }
        for (int i = 0; i < rightArraySize; i++) {
            right[i] = array[mid + 1 + i];
        }

        int i = 0, j = 0; // Initial indices of left and right sub-arrays
        int k = low;      // Initial index of the merged array

        // Merge the temporary arrays into the original array
        while (i < leftArraySize && j < rightArraySize) {
            if (left[i] <= right[j]) {
                array[k++] = left[i++]; // Copy smaller element from left
            } else {
                array[k++] = right[j++]; // Copy smaller element from right
            }
        }

        // Copy any remaining elements from the left sub-array
        while (i < leftArraySize) {
            array[k++] = left[i++];
        }

        // Copy any remaining elements from the right sub-array
        while (j < rightArraySize) {
            array[k++] = right[j++];
        }
    }

    // Recursive function to perform merge sort
    public static void mergesort(int[] array, int low, int high) {
        if (low < high) {
            int mid = (low + high) / 2; // Find the middle point of the array
            mergesort(array, low, mid); // Recursively sort the left half
            mergesort(array, mid + 1, high); // Recursively sort the right half
            merge(array, low, mid, high); // Merge the sorted halves
        }
    }

    // Function to generate the best-case input for merge sort (sorted array)
    public static int[] generateBestCase(int n) {
        int[] best_case = new int[n];
        for (int i = 0; i < n; i++) {
            best_case[i] = i; // Sorted array represents the best case
        }
        return best_case;
    }

    // Function to generate the worst-case input for merge sort (reverse sorted array)
    public static int[] generateWorstCase(int n) {
        int[] worst_case = new int[n];
        for (int i = 0; i < n; i++) {
            worst_case[i] = n - 1 - i; // Reverse sorted array represents the worst case
        }
        return worst_case;
    }

    // Function to compare time for best-case and worst-case scenarios
    public static void compareTime(int n) {
        int[] bestcase = generateBestCase(n);
        int[] worstcase = generateWorstCase(n);

        // Measure time for best-case input
        long start_time = System.nanoTime();
        mergesort(bestcase, 0, bestcase.length - 1); // Perform merge sort on best-case
        long end_time = System.nanoTime();
        long best_caseTime = end_time - start_time;

        // Measure time for worst-case input
        start_time = System.nanoTime();
        mergesort(worstcase, 0, worstcase.length - 1); // Perform merge sort on worst-case
        end_time = System.nanoTime();
        long worst_caseTime = end_time - start_time;

        System.out.println("Best case time is: " + best_caseTime + " ns");
        System.out.println("Worst case time is: " + worst_caseTime + " ns");
    }

    // PART B: TSP CROSSOVER IMPLEMENTATION

    // Function to generate a random chromosome (route) of cities
    public static List<Integer> generate_chromosome(int n) {
        List<Integer> chromosome = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            chromosome.add(i); // Add cities in sequential order
        }
        Collections.shuffle(chromosome); // Shuffle the order to randomize the route
        return chromosome;
    }

    // Function to perform crossover between two chromosomes (parents) to create offspring
    public static List<Integer> crossover_chromosome(List<Integer> parent1, List<Integer> parent2) {
        Random rand = new Random();
        int crossoverPoint = rand.nextInt(parent1.size()); // Random crossover point

        // Create offspring by inheriting cities from parent1 up to the crossover point
        List<Integer> offspring = new ArrayList<>(parent1.subList(0, crossoverPoint));

        // Add remaining cities from parent2, ensuring no duplicates
        for (int city : parent2) {
            if (!offspring.contains(city)) {  // Only add cities not yet in the offspring
                offspring.add(city);
            }
        }

        return offspring;
    }

    // Main function to test the merge sort and TSP crossover
    public static void main(String[] args) {
        // Merge Sort Time Comparison
        int n = 500; // Size of the array for time comparison
        System.out.println("Merge sort time comparison:");
        compareTime(n);

        // TSP Crossover Example
        int TSP_cities = 10; // Number of cities in TSP
        System.out.println("\nTSP crossover example:");
        List<Integer> parent1 = generate_chromosome(TSP_cities);
        List<Integer> parent2 = generate_chromosome(TSP_cities);

        System.out.println("Parent 1: " + parent1);
        System.out.println("Parent 2: " + parent2);

        List<Integer> offspring = crossover_chromosome(parent1, parent2);
        System.out.println("Offspring created from Parent 1 & Parent 2: " + offspring);
    }
}

/*
Time and Space Complexity:

1. Merge Sort:
   - Time Complexity: O(n log n)
     - The merge sort splits the array into halves recursively (log n splits), and each split takes O(n) time to merge the arrays.
     - Thus, the overall time complexity is O(n log n).
   - Space Complexity: O(n)
     - The space complexity is O(n) because temporary arrays are used during the merge process.

2. TSP Crossover:
   - Time Complexity: O(n)
     - The time complexity of the crossover operation is O(n) because it involves scanning the parents and creating a new offspring of size n.
   - Space Complexity: O(n)
     - The space complexity is O(n) due to the space used for storing the offspring list.

*/
