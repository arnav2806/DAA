import java.util.*;

class Node {
    int[] path;         // Current path (cities visited so far)
    boolean[] visited;  // Boolean array to mark visited cities
    double cost;        // Total cost of the current path
    double bound;       // Lower bound estimate
    int pathLength;     // Number of cities in the path

    // Constructor to initialize the node
    public Node(int numCities) {
        this.path = new int[numCities + 1]; // +1 to include the return to starting city
        this.visited = new boolean[numCities];
        this.cost = 0;
        this.bound = 0;
        this.pathLength = 1; // Start with just the starting city
    }
}

public class TSPBranchAndBound {
    /**
     * Calculate the lower bound for the given node using a heuristic.
     * The heuristic used is the sum of the two smallest edges for each unvisited city.
     *
     * @param node          Current node
     * @param numCities     Total number of cities
     * @param distanceMatrix Adjacency matrix with distances between cities
     * @return Estimated lower bound for the node
     */
    public double calculateLowerBound(Node node, int numCities, double[][] distanceMatrix) {
        double bound = node.cost;

        // Iterate over all cities to calculate the contribution of unvisited cities
        for (int city = 0; city < numCities; city++) {
            if (!node.visited[city]) {
                // Find the two smallest edges for this unvisited city
                double firstMin = Double.MAX_VALUE, secondMin = Double.MAX_VALUE;
                for (int otherCity = 0; otherCity < numCities; otherCity++) {
                    if (city != otherCity) {
                        double edgeCost = distanceMatrix[city][otherCity];
                        if (edgeCost < firstMin) {
                            secondMin = firstMin;
                            firstMin = edgeCost;
                        } else if (edgeCost < secondMin) {
                            secondMin = edgeCost;
                        }
                    }
                }
                // Add half of the smallest two edges (heuristic)
                bound += (firstMin + secondMin) / 2;
            }
        }
        return bound;
    }

    /**
     * Generate child nodes for the current node by exploring all unvisited cities.
     *
     * @param parent         The current node
     * @param numCities      Total number of cities
     * @param distanceMatrix Adjacency matrix with distances between cities
     * @return List of child nodes
     */
    public List<Node> generateChildren(Node parent, int numCities, double[][] distanceMatrix) {
        List<Node> children = new ArrayList<>();
        int currentCity = parent.path[parent.pathLength - 1]; // Current city is the last city in the path

        // Try visiting all unvisited cities
        for (int city = 0; city < numCities; city++) {
            if (!parent.visited[city]) {
                Node child = new Node(numCities);
                // Copy path and visited state from parent
                System.arraycopy(parent.path, 0, child.path, 0, parent.pathLength);
                System.arraycopy(parent.visited, 0, child.visited, 0, numCities);

                // Update the child's path and visited array
                child.path[parent.pathLength] = city;
                child.pathLength = parent.pathLength + 1;
                child.visited[city] = true;

                // Update the cost and calculate the bound
                child.cost = parent.cost + distanceMatrix[currentCity][city];
                child.bound = calculateLowerBound(child, numCities, distanceMatrix);

                children.add(child); // Add child to the list
            }
        }
        return children;
    }

    /**
     * Check if the node is a leaf node (all cities are visited).
     *
     * @param node      Current node
     * @param numCities Total number of cities
     * @return True if all cities are visited, otherwise false
     */
    public boolean isLeafNode(Node node, int numCities) {
        return node.pathLength == numCities; // Leaf if all cities are visited
    }

    public static void main(String[] args) {
        int numCities = 4; // Example with 4 cities
        double[][] distanceMatrix = {
            {0, 10, 15, 20},
            {10, 0, 35, 25},
            {15, 35, 0, 30},
            {20, 25, 30, 0}
        };

        TSPBranchAndBound tsp = new TSPBranchAndBound();

        // Initialize the starting node
        Node startNode = new Node(numCities);
        startNode.visited[0] = true; // Start from city 0
        startNode.path[0] = 0;       // Path starts from city 0
        startNode.bound = tsp.calculateLowerBound(startNode, numCities, distanceMatrix);

        double bestCost = Double.MAX_VALUE; // To track the minimum cost
        int[] bestPath = null;              // To track the optimal path

        // Priority queue to explore nodes with the lowest bound first
        PriorityQueue<Node> pq = new PriorityQueue<>(Comparator.comparingDouble(n -> n.bound));
        pq.add(startNode);

        // Branch and Bound algorithm
        while (!pq.isEmpty()) {
            Node node = pq.poll(); // Get the node with the lowest bound

            // Prune nodes with bounds worse than the current best cost
            if (node.bound >= bestCost) continue;

            // If the node is a leaf, calculate its cost and update the best cost if necessary
            if (tsp.isLeafNode(node, numCities)) {
                node.cost += distanceMatrix[node.path[node.pathLength - 1]][0]; // Add cost to return to start
                if (node.cost < bestCost) {
                    bestCost = node.cost;
                    bestPath = Arrays.copyOf(node.path, numCities + 1); // Save the best path
                    bestPath[numCities] = 0; // Complete the cycle
                }
            } else {
                // Generate and process child nodes
                List<Node> children = tsp.generateChildren(node, numCities, distanceMatrix);
                for (Node child : children) {
                    if (child.bound < bestCost) { // Prune nodes with bad bounds
                        pq.add(child);
                    }
                }
            }
        }

        // Output the best cost and path found
        System.out.println("Best cost found: " + bestCost);
        System.out.println("Best path: " + Arrays.toString(bestPath));
    }
}
